# .github/workflows/set-project-field.yml
name: Sync Urgency to Project Field

on:
  workflow_call:
    inputs:
      issue_number:
        required: true
        type: number
      repo_name:
        required: true
        type: string
      issue_body:
        required: true
        type: string

jobs:
  sync-urgency:
    runs-on: ubuntu-latest
    permissions:
      issues: read
    steps:
      - name: Extract urgency and update project field
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const org = 'quintel'
            const projectNumber = 17
            const issueNumber = '${{ inputs.issue_number }}'
            const repoName = '${{ inputs.repo_name }}'
            const body = `${{ inputs.issue_body }}`

            // --- Parse urgency ---
            const match = body.match(/###\s*Urgency \/ Impact\s*\n\s*(.+)/i)
            if (!match) {
              console.log('No urgency found in issue body. Skipping project update.')
              return
            }
            const urgencyLabel = match[1].trim()
            console.log(`Found urgency: ${urgencyLabel}`)

            // --- Fetch project #17 directly ---
            const { organization } = await github.graphql(`
              query($org: String!, $number: Int!) {
                organization(login: $org) {
                  projectV2(number: $number) {
                    id
                    title
                    fields(first: 50) {
                      nodes {
                        id
                        name
                        settings
                      }
                    }
                  }
                }
              }
            `, { org, number: projectNumber })

            const project = organization.projectV2
            if (!project) throw new Error(`Project #${projectNumber} not found.`)

            // --- Find Urgency field ---
            const field = project.fields.nodes.find(f => f.name === "Urgency")
            if (!field) throw new Error('Urgency field not found.')

            // --- Parse single-select options ---
            const options = JSON.parse(field.settings).options
            const option = options.find(o => o.name === urgencyLabel)
            if (!option) throw new Error(`No matching single-select option for "${urgencyLabel}"`)
            const optionId = option.id

            // --- Convert issue number to Node ID ---
            const { repository } = await github.graphql(`
              query($owner: String!, $name: String!, $issueNumber: Int!) {
                repository(owner: $owner, name: $name) {
                  issue(number: $issueNumber) {
                    id
                  }
                }
              }
            `, { owner: org, name: repoName, issueNumber })

            const issueNodeId = repository.issue.id

            // --- Add the issue to the project ---
            const { addItem } = await github.graphql(`
              mutation($projectId: ID!, $contentId: ID!) {
                addProjectV2ItemById(input: { projectId: $projectId, contentId: $contentId }) {
                  item { id }
                }
              }
            `, { projectId: project.id, contentId: issueNodeId })

            const projectItemId = addItem.addProjectV2ItemById.item.id

            // --- Set the Urgency field ---
            await github.graphql(`
              mutation($itemId: ID!, $fieldId: ID!, $optionId: ID!) {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${project.id}",
                  itemId: $itemId,
                  fieldId: $fieldId,
                  value: { singleSelectOptionId: $optionId }
                }) {
                  projectV2Item { id }
                }
              }
            `, { itemId: projectItemId, fieldId: field.id, optionId })

            console.log('Issue added to Project #17 and urgency field set successfully.')
